<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Pro001</name>
    </assembly>
    <members>
        <member name="T:Resourses.Logic.Actions">
            <summary>
            Class for executing interactions between two objects.
            </summary>
        </member>
        <member name="T:Resourses.Logic.Actions.ActionMethod">
            <summary>
            delegate method 
            </summary>
        </member>
        <member name="M:Resourses.Logic.Actions.#ctor(Resourses.Logic.Actions.ActionMethod,Resourses.Logic.Actions.ActionMethod,System.Boolean,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Main constructor
            </summary>
            <param name="theAction">method to be executed</param>
            <param name="theAntiAction">method to be executed once the main method is activated, nullable</param>
            <param name="thePlayerCanInteract">bool value that defines if the player can interact or not with it</param>
            <param name="theActivated">bool value that represents the state of the main action, nullable</param>
            <param name="thecounter">int value to save, nullable</param>
        </member>
        <member name="M:Resourses.Logic.Actions.#ctor(Resourses.Logic.Actions.ActionMethod,System.Boolean)">
            <summary>
            Constructor for an action without AntiAction and no counter.
            </summary>
            <param name="theAction">method to be executed</param>
            <param name="thePlayerCanInteract">bool value that defines if the player can interact or not with it</param>
        </member>
        <member name="M:Resourses.Logic.Actions.#ctor(Resourses.Logic.Actions.ActionMethod,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Constructor for an action without AntiACtion.
            </summary>
            /// <param name="theAction">method to be executed</param>
            <param name="thePlayerCanInteract">bool value that defines if the player can interact or not with it</param>
            <param name="theCounter">int value to save, nullable</param>
        </member>
        <member name="M:Resourses.Logic.Actions.Execute(System.Boolean)">
            <summary>
            Can not be delegated 
            </summary>
            <param name="mainAction"> 
            if true, invoque main action
            if dalse, invoque anti action
            </param>
        </member>
        <member name="T:Resourses.Logic.Level">
            <summary>
            This class manages the level's logic. 
            Here are declared parameters, constructors and get/set methods. 
            </summary>
        </member>
        <member name="M:Resourses.Logic.Maze.Move(System.Int32[],System.Int32[],System.Int32)">
            <summary>
            
            </summary>
            <param name="initialRoomPos"> initial position of the object to move in maze </param>
            <param name="initialCellPos"> initial position of the object to move in room</param>
            <param name="theDir"> direction to move (in terms of Tools.Directios.cs "wsad") </param>
            <returns>
            Returns as int[] the new position as resoult of the movement
            in the next foormat:
            - position 0 and 1 are the Room position
            - position 2 and 3 are the Cell position
            
            [ℹ️] If the output positions are the same of the input, it means
            that no movement have been done due to the pr
            </returns>
        </member>
        <member name="M:Resourses.Logic.Room.WallSwitch(System.Int32,System.Int32)">
            <summary>
            Method used to get positions in a wall as a one dimentional arr
            </summary>
            <param name="i">direction of the wall</param>
            <param name="j">psition in the wall line</param>
            <returns>int[] position of the position in a wall</returns>
        </member>
        <member name="M:Resourses.Logic.Player.Move(System.Int32,Resourses.Logic.Maze)">
            <summary> Move the player in the direction given by the int </summary>
            <param name="theDir">The direction to move in</param>
            <param name="maze">The maze to move in</param>
            <!--aaaa-->
        </member>
        <member name="M:Resourses.Tools.Menue.OptionLoop">
            <summary>
            This loop will repeat it self until a valid key is presed.
            </summary>
        </member>
        <member name="M:Resourses.Tools.TL.PosStepOutside(System.Int32[],System.Int32[],System.Int32)">
            <summary> Make a step outside an space, if the step is outside the space, return the position in other space </summary>
            <param name="pos">The position to step from</param>
            <param name="space">The space to step in or out</param>
            <param name="step">The step to make</param>
        </member>
        <member name="M:Resourses.Visual.Camera.Testing">
                   The idea of this class is to have all the methods nessesary for generating
                an image for the player to see what his sharacter can see.  I will start with
                a 2D senital vew of the maze but at the end if I have enough time I will make
                a 3d one.
            
                   Also create a constructor for making the kind of camera you need.. 
                   you may need more kind of cameras...
            
                   for now the Camera dont need instanses
                *
        </member>
        <member name="M:Resourses.Visual.Image.PrintLine(System.Int32)">
            <summary>
            
            </summary>
            <param name="row">determinates the row that will be prined</param>
        </member>
        <member name="M:Resourses.Visual.Screen.Testing">
                                   +
                                               +
                                               +
                                               +
                                               +
                                               +
                                               +
                                               +
                    ++++++ IMPORTANTE: dos caracteres hacen un cuadrado ++++++
                                               +
                                               +
                                               +
                                               +
                                               +
                                               +
                                               +
                                               +
            
                    public void Screen(int width, int height){
            
                    }
                    try them to make a flexible version
            
            
                    *
        </member>
        <member name="M:Resourses.Visual.TextBox.StringParagraphs_To_ListOfLines(System.String[],System.Int32)">
            <summary>
            this method will make a list of paragraphs that are lists of strings with the same length
            </summary>
            <param name="strings"> each string is a paragraph</param>
            <param name="length"> the max length of a text line</param>
            <returns></returns>
        </member>
    </members>
</doc>
